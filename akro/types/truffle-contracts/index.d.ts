/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import BN from "bn.js";

export interface AccessModuleContract
  extends Truffle.Contract<AccessModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AccessModuleInstance>;
}

export interface AccountsModuleContract
  extends Truffle.Contract<AccountsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AccountsModuleInstance>;
}

export interface BaseContract extends Truffle.Contract<BaseInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BaseInstance>;
}

export interface BaseFundsModuleContract
  extends Truffle.Contract<BaseFundsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BaseFundsModuleInstance>;
}

export interface BondingCurveContract
  extends Truffle.Contract<BondingCurveInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BondingCurveInstance>;
}

export interface CErc20StubContract
  extends Truffle.Contract<CErc20StubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CErc20StubInstance>;
}

export interface CompoundDAIStubContract
  extends Truffle.Contract<CompoundDAIStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CompoundDAIStubInstance>;
}

export interface CompoundModuleContract
  extends Truffle.Contract<CompoundModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CompoundModuleInstance>;
}

export interface ContextContract extends Truffle.Contract<ContextInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContextInstance>;
}

export interface CoreInterfaceContract
  extends Truffle.Contract<CoreInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CoreInterfaceInstance>;
}

export interface CurveFiYModuleContract
  extends Truffle.Contract<CurveFiYModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveFiYModuleInstance>;
}

export interface CurveModuleContract
  extends Truffle.Contract<CurveModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveModuleInstance>;
}

export interface DefiFundsModuleContract
  extends Truffle.Contract<DefiFundsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DefiFundsModuleInstance>;
}

export interface DefiModuleBaseContract
  extends Truffle.Contract<DefiModuleBaseInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DefiModuleBaseInstance>;
}

export interface DefiModuleStubContract
  extends Truffle.Contract<DefiModuleStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DefiModuleStubInstance>;
}

export interface DefiOperatorRoleContract
  extends Truffle.Contract<DefiOperatorRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DefiOperatorRoleInstance>;
}

export interface DistributionTokenContract
  extends Truffle.Contract<DistributionTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DistributionTokenInstance>;
}

export interface ERC165Contract extends Truffle.Contract<ERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC165Instance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20Instance>;
}

export interface ERC20BurnableContract
  extends Truffle.Contract<ERC20BurnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20BurnableInstance>;
}

export interface ERC20DetailedContract
  extends Truffle.Contract<ERC20DetailedInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20DetailedInstance>;
}

export interface ERC20MintableContract
  extends Truffle.Contract<ERC20MintableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20MintableInstance>;
}

export interface ERC721Contract extends Truffle.Contract<ERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721Instance>;
}

export interface ERC721BurnableContract
  extends Truffle.Contract<ERC721BurnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721BurnableInstance>;
}

export interface ERC721MetadataContract
  extends Truffle.Contract<ERC721MetadataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721MetadataInstance>;
}

export interface FreeDAIContract extends Truffle.Contract<FreeDAIInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FreeDAIInstance>;
}

export interface FundsModuleContract
  extends Truffle.Contract<FundsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FundsModuleInstance>;
}

export interface FundsModuleStubContract
  extends Truffle.Contract<FundsModuleStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FundsModuleStubInstance>;
}

export interface FundsOperatorRoleContract
  extends Truffle.Contract<FundsOperatorRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FundsOperatorRoleInstance>;
}

export interface IAccessModuleContract
  extends Truffle.Contract<IAccessModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAccessModuleInstance>;
}

export interface ICErc20Contract extends Truffle.Contract<ICErc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICErc20Instance>;
}

export interface ICurveFiDepositContract
  extends Truffle.Contract<ICurveFiDepositInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiDepositInstance>;
}

export interface ICurveFiSwapContract
  extends Truffle.Contract<ICurveFiSwapInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiSwapInstance>;
}

export interface ICurveModuleContract
  extends Truffle.Contract<ICurveModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveModuleInstance>;
}

export interface IDefiModuleContract
  extends Truffle.Contract<IDefiModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDefiModuleInstance>;
}

export interface IERC165Contract extends Truffle.Contract<IERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC165Instance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IERC721Contract extends Truffle.Contract<IERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721Instance>;
}

export interface IERC721MetadataContract
  extends Truffle.Contract<IERC721MetadataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721MetadataInstance>;
}

export interface IERC721ReceiverContract
  extends Truffle.Contract<IERC721ReceiverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721ReceiverInstance>;
}

export interface IFundsModuleContract
  extends Truffle.Contract<IFundsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IFundsModuleInstance>;
}

export interface ILiquidityModuleContract
  extends Truffle.Contract<ILiquidityModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILiquidityModuleInstance>;
}

export interface ILoanLimitsModuleContract
  extends Truffle.Contract<ILoanLimitsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILoanLimitsModuleInstance>;
}

export interface ILoanModuleContract
  extends Truffle.Contract<ILoanModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILoanModuleInstance>;
}

export interface ILoanProposalsModuleContract
  extends Truffle.Contract<ILoanProposalsModuleInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ILoanProposalsModuleInstance>;
}

export interface IPTokenContract extends Truffle.Contract<IPTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPTokenInstance>;
}

export interface IRAYContract extends Truffle.Contract<IRAYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRAYInstance>;
}

export interface IRAYNAVCalculatorContract
  extends Truffle.Contract<IRAYNAVCalculatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRAYNAVCalculatorInstance>;
}

export interface IRAYPortfolioManagerContract
  extends Truffle.Contract<IRAYPortfolioManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IRAYPortfolioManagerInstance>;
}

export interface IRAYStorageContract
  extends Truffle.Contract<IRAYStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRAYStorageInstance>;
}

export interface ITestnetCompoundDAIContract
  extends Truffle.Contract<ITestnetCompoundDAIInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ITestnetCompoundDAIInstance>;
}

export interface IYErc20Contract extends Truffle.Contract<IYErc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IYErc20Instance>;
}

export interface LiquidityModuleContract
  extends Truffle.Contract<LiquidityModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LiquidityModuleInstance>;
}

export interface LoanLimitsModuleContract
  extends Truffle.Contract<LoanLimitsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LoanLimitsModuleInstance>;
}

export interface LoanModuleContract
  extends Truffle.Contract<LoanModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LoanModuleInstance>;
}

export interface LoanModuleStubContract
  extends Truffle.Contract<LoanModuleStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LoanModuleStubInstance>;
}

export interface LoanProposalsModuleContract
  extends Truffle.Contract<LoanProposalsModuleInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<LoanProposalsModuleInstance>;
}

export interface MinterRoleContract
  extends Truffle.Contract<MinterRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MinterRoleInstance>;
}

export interface ModuleContract extends Truffle.Contract<ModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ModuleInstance>;
}

export interface ModuleNamesContract
  extends Truffle.Contract<ModuleNamesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ModuleNamesInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface PausableContract extends Truffle.Contract<PausableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PausableInstance>;
}

export interface PauserRoleContract
  extends Truffle.Contract<PauserRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PauserRoleInstance>;
}

export interface PoolContract extends Truffle.Contract<PoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PoolInstance>;
}

export interface PTokenContract extends Truffle.Contract<PTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PTokenInstance>;
}

export interface RAYModuleContract extends Truffle.Contract<RAYModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RAYModuleInstance>;
}

export interface RAYStubContract extends Truffle.Contract<RAYStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RAYStubInstance>;
}

export interface TestAddressListContract
  extends Truffle.Contract<TestAddressListInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestAddressListInstance>;
}

export interface TestnetCErc20ProxyContract
  extends Truffle.Contract<TestnetCErc20ProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestnetCErc20ProxyInstance>;
}

export interface TestSQRTContract extends Truffle.Contract<TestSQRTInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestSQRTInstance>;
}

export interface TokenModuleContract
  extends Truffle.Contract<TokenModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenModuleInstance>;
}

export interface VotesModuleContract
  extends Truffle.Contract<VotesModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VotesModuleInstance>;
}

export interface WhitelistAdminRoleContract
  extends Truffle.Contract<WhitelistAdminRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistAdminRoleInstance>;
}

export interface WhitelistedRoleContract
  extends Truffle.Contract<WhitelistedRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistedRoleInstance>;
}

export interface AccessModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addPauser: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addWhitelistAdmin: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isPauser(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelistAdmin(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelisted(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceWhitelisted: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  whitelistEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  enableWhitelist: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  disableWhitelist: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isOperationAllowed(
    operation: number | BN | string,
    sender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface AccountsModuleInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface BaseInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface BaseFundsModuleInstance extends Truffle.ContractInstance {
  addFundsOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isFundsOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lTokens(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registeredLTokens(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceFundsOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositLTokens: {
    (
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawLTokens: {
    (
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributePTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lockPTokens: {
    (
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintAndLockPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockAndWithdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnLockedPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerLToken: {
    (
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterLToken: {
    (lToken: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      lToken: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLTokenRate: {
    (
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allRegisteredLTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  refundLTokens: {
    (
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emitStatusEvent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  lBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getPrefferableTokenForWithdraw(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isLTokenRegistered(
    token: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  normalizeLTokenValue(
    token: string | BN,
    value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  denormalizeLTokenValue(
    token: string | BN,
    value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolEnter(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExit(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitWithFee(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitInverse(
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;
}

export interface BondingCurveInstance extends Truffle.ContractInstance {
  curveA(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  curveB(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  initialize: {
    (
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateEnter(
    liquidAssets: number | BN | string,
    debtCommitments: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExit(
    liquidAssets: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExitInverse(
    liquidAssets: number | BN | string,
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  curveFunction(
    s: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  inverseCurveFunction(
    x: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface CErc20StubInstance extends Truffle.ContractInstance {
  ANNUAL_SECONDS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  EXP_SCALE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  INITIAL_RATE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  INTEREST_RATE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  balanceOfUnderlying: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemUnderlying: {
    (
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  accrueInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getBalanceOfUnderlying(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  exchangeRateStored(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface CompoundDAIStubInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allocateTo: {
    (
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CompoundModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ContextInstance extends Truffle.ContractInstance {}

export interface CoreInterfaceInstance extends Truffle.ContractInstance {
  set: {
    (
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMetadata: {
    (
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isConstant(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get(_name: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getName(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    _current: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface CurveFiYModuleInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  DONATE_DUST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  addDefiOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  availableInterest(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;

  balances(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  curveFiDeposit(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  distributions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  distributionsLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  handleDeposit: {
    (
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDefiOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  poolBalance: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatePTKBalance: {
    (
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setCurveFi: {
    (deposit: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      deposit: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      deposit: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      deposit: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registeredTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getTokenIndex(
    token: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface CurveModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PERCENT_DIVIDER(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  calculateEnter(
    liquidAssets: number | BN | string,
    debtCommitments: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExit(
    liquidAssets: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExitInverse(
    liquidAssets: number | BN | string,
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  curveA(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  curveB(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  curveFunction(
    s: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  inverseCurveFunction(
    x: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawFeePercent(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setWithdrawFee: {
    (
      _withdrawFeePercent: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _withdrawFeePercent: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _withdrawFeePercent: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _withdrawFeePercent: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCurveParams: {
    (
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _curveA: number | BN | string,
      _curveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateExitInverseWithFee(
    liquidAssets: number | BN | string,
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  calculateExitWithFee(
    liquidAssets: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExitFee(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface DefiFundsModuleInstance extends Truffle.ContractInstance {
  addFundsOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allRegisteredLTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  burnLockedPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculatePoolEnter(
    lAmount: number | BN | string,
    liquidityCorrection: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExit(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitInverse(
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  calculatePoolExitWithFee(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  denormalizeLTokenValue(
    token: string | BN,
    value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  depositLTokens: {
    (
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributePTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emitStatusEvent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPrefferableTokenForWithdraw(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isFundsOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isLTokenRegistered(
    token: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lTokens(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  lockPTokens: {
    (
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintAndLockPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  normalizeLTokenValue(
    token: string | BN,
    value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  refundLTokens: {
    (
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerLToken: {
    (
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registeredLTokens(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceFundsOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setLTokenRate: {
    (
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockAndWithdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterLToken: {
    (lToken: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      lToken: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lToken: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lToken: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawLTokens: {
    (
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      poolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      poolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      poolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      to: string | BN,
      amount: number | BN | string,
      poolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawAllFromDefi: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositAllToDefi: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DefiModuleBaseInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addDefiOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balances(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  distributions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isDefiOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registeredTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  initialize: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  handleDeposit: {
    (
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updatePTKBalance: {
    (
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  poolBalance: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  availableInterest(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;

  distributionsLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface DefiModuleStubInstance extends Truffle.ContractInstance {
  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerToken: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  handleDeposit: {
    (
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimDistributions: {
    (arg0: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatePTKBalance: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  poolBalance: {
    (arg0: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registeredTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  availableInterest(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;
}

export interface DefiOperatorRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addDefiOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDefiOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface DistributionTokenInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addMinter: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nextDistributions(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fullBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateUnclaimedDistributions(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateDistributedAmount(
    fromDistribution: number | BN | string,
    toDistribution: number | BN | string,
    initialBalance: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributionBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  distributionTotalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface ERC165Instance extends Truffle.ContractInstance {
  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC20BurnableInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC20DetailedInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface ERC20MintableInstance extends Truffle.ContractInstance {
  addMinter: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721BurnableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface FreeDAIInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  burn: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FundsModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addFundsOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isFundsOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceFundsOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  depositLTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawLTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributePTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lockPTokens: {
    (
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintAndLockPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockAndWithdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnLockedPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  refundLTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolEnter(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExit(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitWithFee(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitInverse(
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;
}

export interface FundsModuleStubInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  depositLTokens: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawLTokens: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributePTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPTokens: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lockPTokens: {
    (
      arg0: (string | BN)[],
      arg1: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: (string | BN)[],
      arg1: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: (string | BN)[],
      arg1: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: (string | BN)[],
      arg1: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintAndLockPTokens: {
    (
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockAndWithdrawPTokens: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnLockedPTokens: {
    (
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculatePoolEnter(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExit(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitWithFee(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitInverse(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  lBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pBalanceOf(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface FundsOperatorRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addFundsOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceFundsOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isFundsOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IAccessModuleInstance extends Truffle.ContractInstance {
  isOperationAllowed(
    operation: number | BN | string,
    sender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ICErc20Instance extends Truffle.ContractInstance {
  transfer: {
    (
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  balanceOfUnderlying: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  exchangeRateStored(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  accrueInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  mint: {
    (
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemUnderlying: {
    (
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ICurveFiDepositInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      uamounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BN | string,
      min_uamounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BN | string,
      min_uamounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      min_uamounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      min_uamounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      uamounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_one_coin: {
    (
      _token_amount: number | BN | string,
      i: number | BN | string,
      min_uamount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token_amount: number | BN | string,
      i: number | BN | string,
      min_uamount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token_amount: number | BN | string,
      i: number | BN | string,
      min_uamount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token_amount: number | BN | string,
      i: number | BN | string,
      min_uamount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw_donated_dust: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  coins(
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  underlying_coins(
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calc_withdraw_one_coin(
    _token_amount: number | BN | string,
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface ICurveFiSwapInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      amounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BN | string)[],
      min_mint_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BN | string,
      min_amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BN | string,
      min_amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      min_amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      min_amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      amounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BN | string)[],
      max_burn_amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balances(
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  A(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  fee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ICurveModuleInstance extends Truffle.ContractInstance {
  calculateEnter(
    liquidAssets: number | BN | string,
    debtCommitments: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExit(
    liquidAssets: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExitWithFee(
    liquidAssets: number | BN | string,
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateExitInverseWithFee(
    liquidAssets: number | BN | string,
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  calculateExitFee(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface IDefiModuleInstance extends Truffle.ContractInstance {
  registeredTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  poolBalance: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  availableInterest(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;

  withdrawInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  handleDeposit: {
    (
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatePTKBalance: {
    (
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setApprovalForAll: {
    (
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IERC721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IFundsModuleInstance extends Truffle.ContractInstance {
  depositLTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawLTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributePTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPTokens: {
    (
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lockPTokens: {
    (
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: (string | BN)[],
      amount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintAndLockPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unlockAndWithdrawPTokens: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnLockedPTokens: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculatePoolEnter(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExit(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculatePoolExitInverse(
    pAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  calculatePoolExitWithFee(
    lAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface ILiquidityModuleInstance extends Truffle.ContractInstance {
  deposit: {
    (
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawForRepay: {
    (
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ILoanLimitsModuleInstance extends Truffle.ContractInstance {
  set: {
    (
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  get(
    limit: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lDebtAmountMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  debtInterestMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pledgePercentMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lMinPledgeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  debtLoadMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maxOpenProposalsPerUser(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minCancelProposalTimeout(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface ILoanModuleInstance extends Truffle.ContractInstance {
  createDebt: {
    (
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repay: {
    (
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayPTK: {
    (
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayAllInterest: {
    (borrower: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      borrower: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeDebtDefault: {
    (
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawUnlockedPledge: {
    (
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDebtDefaultTimeReached(
    borrower: string | BN,
    debt: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  hasActiveDebts(
    borrower: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  totalLDebts(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface ILoanProposalsModuleInstance extends Truffle.ContractInstance {
  createDebtProposal: {
    (
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPledge: {
    (
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPledge: {
    (
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeDebtProposal: {
    (
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalLProposals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getProposalAndPledgeInfo(
    borrower: string | BN,
    proposal: number | BN | string,
    supporter: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN, BN]>;

  getProposalInterestRate(
    borrower: string | BN,
    proposal: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface IPTokenInstance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fullBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateDistributedAmount(
    startDistribution: number | BN | string,
    nextDistribution: number | BN | string,
    initialBalance: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface IRAYInstance extends Truffle.ContractInstance {
  mint: {
    (
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTokenValue: {
    (
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRAYNAVCalculatorInstance extends Truffle.ContractInstance {
  getTokenValue: {
    (
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRAYPortfolioManagerInstance extends Truffle.ContractInstance {
  mint: {
    (
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRAYStorageInstance extends Truffle.ContractInstance {
  getTokenKey(
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPrincipalAddress(
    portfolioId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getIsERC20(
    principalAddress: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getContractAddress(
    contractId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenShares(
    portfolioId: string | BN,
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenCapital(
    portfolioId: string | BN,
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenAllowance(
    portfolioId: string | BN,
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface ITestnetCompoundDAIInstance extends Truffle.ContractInstance {
  allocateTo: {
    (
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IYErc20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deposit: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      shares: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      shares: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      shares: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      shares: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPricePerFullShare(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface LiquidityModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  limits(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN]>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  deposit: {
    (
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lAmount: number | BN | string,
      pAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawForRepay: {
    (
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLimits: {
    (
      lDepositMin: number | BN | string,
      pWithdrawMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      lDepositMin: number | BN | string,
      pWithdrawMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lDepositMin: number | BN | string,
      pWithdrawMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lDepositMin: number | BN | string,
      pWithdrawMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface LoanLimitsModuleInstance extends Truffle.ContractInstance {
  DEBT_LOAD_MULTIPLIER(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  INTEREST_MULTIPLIER(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PLEDGE_PERCENT_MULTIPLIER(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  set: {
    (
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      limit: number | BN | string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  get(
    limit: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lDebtAmountMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  debtInterestMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pledgePercentMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lMinPledgeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  debtLoadMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maxOpenProposalsPerUser(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minCancelProposalTimeout(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface LoanModuleInstance extends Truffle.ContractInstance {
  ANNUAL_SECONDS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  DEBT_LOAD_MULTIPLIER(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  DEBT_REPAY_DEADLINE_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  INTEREST_MULTIPLIER(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  activeDebts(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  debts(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, boolean]>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  createDebt: {
    (
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      proposal: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repay: {
    (
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debt: number | BN | string,
      lAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayPTK: {
    (
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debt: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayAllInterest: {
    (borrower: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      borrower: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeDebtDefault: {
    (
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawUnlockedPledge: {
    (
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      debt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDebtDefaultTimeReached(
    borrower: string | BN,
    debt: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  calculatePledgeInfo(
    borrower: string | BN,
    debt: number | BN | string,
    supporter: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN]>;

  getDebtRequiredPayments(
    borrower: string | BN,
    debt: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  hasActiveDebts(
    borrower: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getUnpaidInterest(
    borrower: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  totalLDebts(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  calculateInterestPayment(
    debtLAmount: number | BN | string,
    interest: number | BN | string,
    prevPayment: number | BN | string,
    currentPayment: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface LoanModuleStubInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  createDebtProposal: {
    (
      debtLAmount: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debtLAmount: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      debtLAmount: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debtLAmount: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPledge: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPledge: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeDebtProposal: {
    (
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDebt: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repay: {
    (
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayPTK: {
    (
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayAllInterest: {
    (arg0: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeDebtDefault: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawUnlockedPledge: {
    (
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculatePledgeInfo(
    arg0: string | BN,
    arg1: number | BN | string,
    arg2: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN]>;

  getRequiredPledge(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getProposalAndPledgeInfo(
    arg0: string | BN,
    arg1: number | BN | string,
    arg2: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN, BN]>;

  getProposalInterestRate(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDebtRequiredPayments(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  isDebtDefaultTimeReached(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  hasActiveDebts(
    sender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  totalLDebts(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalLProposals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalLDebtsAndProposals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  calculateInterestPayment(
    arg0: number | BN | string,
    arg1: number | BN | string,
    arg2: number | BN | string,
    arg3: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface LoanProposalsModuleInstance extends Truffle.ContractInstance {
  BORROWER_COLLATERAL_TO_FULL_COLLATERAL_MULTIPLIER(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  BORROWER_COLLATERAL_TO_FULL_COLLATERAL_RATIO(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  COLLATERAL_TO_DEBT_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  COLLATERAL_TO_DEBT_RATIO_MULTIPLIER(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PLEDGE_PERCENT_MULTIPLIER(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  debtProposals(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, string, BN, BN, BN, boolean]>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  openProposals(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDebtProposal: {
    (
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      debtLAmount: number | BN | string,
      interest: number | BN | string,
      pAmountMax: number | BN | string,
      descriptionHash: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPledge: {
    (
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      lAmountMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawPledge: {
    (
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string | BN,
      proposal: number | BN | string,
      pAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelDebtProposal: {
    (
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeDebtProposal: {
    (
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getProposalAndPledgeInfo(
    borrower: string | BN,
    proposal: number | BN | string,
    supporter: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN, BN]>;

  getProposalInterestRate(
    borrower: string | BN,
    proposal: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getRequiredPledge(
    borrower: string | BN,
    proposal: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPledgeRequirements(
    borrower: string | BN,
    proposal: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  totalLProposals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface MinterRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addMinter: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ModuleNamesInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface OwnableInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PausableInstance extends Truffle.ContractInstance {
  addPauser: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPauser(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PauserRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPauser(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addPauser: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PoolInstance extends Truffle.ContractInstance {
  abiOf(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  description(txDetails?: Truffle.TransactionDetails): Promise<string>;

  founder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  is_constant(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setMetadata: {
    (
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  set: {
    (
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isConstant(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get(_name: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getName(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    _current: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface PTokenInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addMinter: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  burn: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BN | string,
    toDistribution: number | BN | string,
    initialBalance: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateUnclaimedDistributions(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  fullBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nextDistributions(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  distributionTotalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface RAYModuleInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addDefiOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  availableInterest(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;

  balances(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  distributionsLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  handleDeposit: {
    (
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDefiOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  poolBalance: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokens(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatePTKBalance: {
    (
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  onERC721Received: {
    (
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      arg1: string | BN,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerToken: {
    (
      token: string | BN,
      portfolioId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      portfolioId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      portfolioId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      portfolioId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterToken: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registeredTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
}

export interface RAYStubInstance extends Truffle.ContractInstance {
  ANNUAL_SECONDS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  EXP_SCALE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  INTEREST_RATE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  burn: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (_dai: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _dai: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _dai: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _dai: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      arg2: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      arg2: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      arg2: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      arg2: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTokenValue: {
    (
      arg0: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      arg0: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onERC721Received: {
    (
      arg0: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTokenKey(
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPrincipalAddress(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getIsERC20(
    principalAddress: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getContractAddress(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenShares(
    arg0: string | BN,
    arg1: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenCapital(
    arg0: string | BN,
    arg1: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenAllowance(
    arg0: string | BN,
    arg1: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenValueStub(
    tokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;
}

export interface TestAddressListInstance extends Truffle.ContractInstance {
  append: {
    (
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  prepend: {
    (
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _item: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_item: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _item: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _item: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _item: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  replace: {
    (
      _from: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _from: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BN,
      _to: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swap: {
    (
      _a: string | BN,
      _b: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _a: string | BN,
      _b: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _a: string | BN,
      _b: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _a: string | BN,
      _b: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  last(txDetails?: Truffle.TransactionDetails): Promise<string>;

  contains(
    _item: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  next(
    _item: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  prev(
    _item: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TestnetCErc20ProxyInstance extends Truffle.ContractInstance {
  akropolisDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  cDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  testnetDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  mint: {
    (
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemUnderlying: {
    (
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfUnderlying: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBalanceOfUnderlying(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  exchangeRateStored(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  accrueInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface TestSQRTInstance extends Truffle.ContractInstance {
  sqrt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setSqrtBitByBit: {
    (x: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSqrtBabylonian: {
    (x: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sqrtBitByBit(
    x: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  sqrtBabylonian(
    x: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface TokenModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface VotesModuleInstance extends Truffle.ContractInstance {
  MODULE_ACCESS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_CURVE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_FUNDS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LIQUIDITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_LIMTS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_LOAN_PROPOSALS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  MODULE_LTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MODULE_PTOKEN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface WhitelistAdminRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelistAdmin(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelistAdmin: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface WhitelistedRoleInstance extends Truffle.ContractInstance {
  addWhitelistAdmin: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelistAdmin(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelisted(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceWhitelisted: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}
